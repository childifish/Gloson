package test

import (
	"fmt"
	"gloson/gloson"
	"gloson/under"
	"reflect"
	"testing"
)

func RecursionPrint(input map[string]interface{}) {
	for k, v := range input {
		fmt.Println("key", k, "value", v, "type", reflect.TypeOf(v))
		value := v.(under.JsonKV)
		if value.WithinType == "option" {
			mapIn, ok := value.Within.(map[string]interface{})
			if ok {
				RecursionPrint(mapIn)
			}
		}
		if value.WithinType == "array" {
			fmt.Println("array的遍历是坏的")
			mapIn2, ok := value.Within.([]interface{})
			fmt.Println("key", k, "value", v, "type", reflect.TypeOf(value.Within))
			if ok {
				for k, v := range mapIn2 {
					fmt.Println("keyin", k, "valuein", v, "typein", reflect.TypeOf(value.Within))
				}
			}
		}
	}
	return
}

func Test(t *testing.T)  {
	s := "{\n    \"data\": {\n        \"goods\": null\n    },\n    \"info\": \"success\",\n    \"status\": 200\n}"
	map1,_:= gloson.Map(s)
	fmt.Println(map1)
}


func Test2(t *testing.T)  {
	s := "{\n\"name\":\"网站\",\n\"num\":3,\n\"sites\":[1,2,3]\n}"
	type AutoGenerated struct {
		Name  string  `json:"name"`
		Num   int     `json:"num"`
		Sites []int64 `json:"sites"`
	}
	a := &AutoGenerated{}
	gloson.Bind(s, a)
	fmt.Println(a)
}

func Test3(t *testing.T)  {
	type AutoGenerated struct {
		Name  string  `json:"name"`
		Num   int     `json:"num"`
	}
	a := &AutoGenerated{
		Name: "111",
		Num: 123,
	}
	s,_:= gloson.Marshall(a)
	fmt.Println(s)
}